
public class TetrisBoard
{
  public static final int NUM_COLS = 10;
  public static final int NUM_ROWS = 18;
  private int numCols;
  private int numRows;
  private boolean[][] blockMatrix;
  private TetrisPiece currentPiece;
  private int[] currentPieceGridPosition;
  
  public TetrisBoard()
  {
    this.numCols = 10;
    this.numRows = 18;
    
    initBoard();
    
    initCurrentGP();
    
    this.currentPiece = null;
    
    addNewPiece();
  }
  
  private void initCurrentGP()
  {
    this.currentPieceGridPosition = new int[2];
    for (int i = 0; i < this.currentPieceGridPosition.length; i++) {
      this.currentPieceGridPosition[i] = -1;
    }
  }
  
  private void initBoard()
  {
    this.blockMatrix = new boolean[this.numRows][this.numCols];
    for (int i = 0; i < this.blockMatrix.length; i++) {
      for (int j = 0; j < this.blockMatrix[i].length; j++) {
        this.blockMatrix[i][j] = false;
      }
    }
  }
  
  public void landPiece()
  {
    for (int i = 0; i < 4; i++) {
      for (int j = 0; j < 4; j++) {
        if (this.currentPiece.isFilled(this.currentPiece.getPieceRotation(), i, j)) {
          this.blockMatrix[(this.currentPieceGridPosition[0] + i)][
            (this.currentPieceGridPosition[1] + j)] = true;
        }
      }
    }
  }
  
  public boolean moveLeft()
  {
    if (this.currentPiece == null) {
      return false;
    }
    boolean validMove = validMove(this.currentPiece, 
      this.currentPiece.getPieceRotation(), this.currentPieceGridPosition[0], 
      this.currentPieceGridPosition[1] - 1);
    if (validMove) {
      this.currentPieceGridPosition[1] -= 1;
    }
    return validMove;
  }
  
  public boolean moveRight()
  {
    if (this.currentPiece == null) {
      return false;
    }
    boolean validMove = validMove(this.currentPiece, 
      this.currentPiece.getPieceRotation(), this.currentPieceGridPosition[0], 
      this.currentPieceGridPosition[1] + 1);
    if (validMove) {
      this.currentPieceGridPosition[1] += 1;
    }
    return validMove;
  }
  
  public boolean moveDown()
  {
    if (this.currentPiece == null) {
      return false;
    }
    boolean validMove = validMove(this.currentPiece, 
      this.currentPiece.getPieceRotation(), this.currentPieceGridPosition[0] + 1, 
      this.currentPieceGridPosition[1]);
    if (validMove) {
      this.currentPieceGridPosition[0] += 1;
    }
    return validMove;
  }
  
  public boolean rotateCW()
  {
    if (this.currentPiece == null) {
      return false;
    }
    boolean validMove = validMove(this.currentPiece, 
      (this.currentPiece.getPieceRotation() + 90) % 360, 
      this.currentPieceGridPosition[0], this.currentPieceGridPosition[1]);
    if (validMove) {
      this.currentPiece.rotateCW();
    }
    return validMove;
  }
  
  public boolean rotateCCW()
  {
    if (this.currentPiece == null) {
      return false;
    }
    boolean validMove = validMove(this.currentPiece, 
      (this.currentPiece.getPieceRotation() - 90 + 360) % 360, 
      this.currentPieceGridPosition[0], this.currentPieceGridPosition[1]);
    if (validMove) {
      this.currentPiece.rotateCCW();
    }
    return validMove;
  }
  
  private boolean detectCollision(TetrisPiece piece, int rot, int gridRow, int gridCol)
  {
    for (int i = 0; i < 4; i++) {
      for (int j = 0; j < 4; j++) {
        if (piece.isFilled(rot, i, j)) {
          if (this.blockMatrix[(gridRow + i)][(gridCol + j)] != false) {
            return true;
          }
        }
      }
    }
    return false;
  }
  
  private boolean detectOutOfBounds(TetrisPiece piece, int rot, int gridRow, int gridCol)
  {
    if (gridCol < 0) {
      return true;
    }
    for (int i = 0; i < 4; i++) {
      for (int j = 0; j < 4; j++) {
        if (piece.isFilled(rot, i, j)) {
          if ((gridRow + i >= this.numRows) || 
            (gridCol + j >= this.numCols)) {
            return true;
          }
        }
      }
    }
    return false;
  }
  
  private boolean validMove(TetrisPiece piece, int rot, int gridRow, int gridCol)
  {
    return (!detectOutOfBounds(piece, rot, gridRow, gridCol)) && 
      (!detectCollision(piece, rot, gridRow, gridCol));
  }
  
  public boolean hasBlock(int row, int col)
  {
    for (int i = 0; i < 4; i++) {
      for (int j = 0; j < 4; j++)
      {
        int globalGridRow = this.currentPieceGridPosition[0] + i;
        int globalGridCol = this.currentPieceGridPosition[1] + j;
        if ((globalGridRow == row) && (globalGridCol == col) && 
          (this.currentPiece.isFilled(this.currentPiece.getPieceRotation(), i, j))) {
          return true;
        }
      }
    }
    return this.blockMatrix[row][col];
  }
  
  public void addNewPiece()
  {
    int pieceType = (int)Math.floor(Math.random() * 7.0D);
    switch (pieceType)
    {
    case 0: 
      this.currentPiece = new TetrisStick();
      break;
    case 1: 
      this.currentPiece = new TetrisSquare();
      break;
    case 2: 
      this.currentPiece = new TetrisL1();
      break;
    case 3: 
      this.currentPiece = new TetrisL2();
      break;
    case 4: 
      this.currentPiece = new TetrisT();
      break;
    case 5: 
      this.currentPiece = new TetrisS1();
      break;
    case 6: 
      this.currentPiece = new TetrisS2();
      break;
    default: 
      System.out.println("Shouldn't have gotten here!");
    }
    this.currentPieceGridPosition[0] = 0;
    this.currentPieceGridPosition[1] = 3;
  }
  
  public int numberOfFormedLines()
  {
    int numLines = 0;
    for (int i = 0; i < this.numRows; i++) {
      if (fullLine(i))
      {
        numLines++;
        removeLine(i);
      }
    }
    return numLines;
  }
  
  private boolean fullLine(int row)
  {
    for (int col = 0; col < this.numCols; col++) {
      if (this.blockMatrix[row][col] == false) {
        return false;
      }
    }
    return true;
  }
  
  private void removeLine(int row)
  {
    for (int i = row; i > 0; i--) {
      for (int j = 0; j < this.numCols; j++) {
        this.blockMatrix[i][j] = this.blockMatrix[(i - 1)][j];
      }
    }
    for (int j = 0; j < this.numCols; j++) {
      this.blockMatrix[0][j] = false;
    }
  }
  
  public boolean[][] getBlockMatrix()
  {
    return this.blockMatrix;
  }
  
  public TetrisPiece getCurrentPiece()
  {
    return this.currentPiece;
  }
  
  public int[] getCurrentPieceGridPosition()
  {
    return this.currentPieceGridPosition;
  }
  
  public int getNumCols()
  {
    return this.numCols;
  }
  
  public int getNumRows()
  {
    return this.numRows;
  }
}
